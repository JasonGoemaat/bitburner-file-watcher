{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":1791,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":1e+27,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.001,\"hacking_speed\":1.001,\"hacking_money\":1.001,\"hacking_grow\":1.001,\"hacking\":1.001,\"strength\":1.001,\"defense\":1.001,\"dexterity\":1.001,\"agility\":1.001,\"charisma\":1.001,\"hacking_exp\":1.001,\"strength_exp\":1.001,\"defense_exp\":1.001,\"dexterity_exp\":1.001,\"agility_exp\":1.001,\"charisma_exp\":1.001,\"company_rep\":1.001,\"faction_rep\":1.001,\"crime_money\":1.001,\"crime_success\":1.001,\"hacknet_node_money\":1.001,\"hacknet_node_purchase_cost\":0.999,\"hacknet_node_ram_cost\":0.999,\"hacknet_node_core_cost\":0.999,\"hacknet_node_level_cost\":0.999,\"work_money\":1.001,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"money\":0,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{},\"currentServer\":\"home\",\"purchasedServers\":[\"peta\"],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[],\"factionInvitations\":[\"Sector-12\"],\"queuedAugmentations\":[],\"augmentations\":[],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"sleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"entropy\":0,\"lastUpdate\":1665113633712,\"lastSave\":1665113620516,\"totalPlaytime\":47312400,\"playtimeSinceLastAug\":47312400,\"playtimeSinceLastBitnode\":47312400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":999936549130040.2,\"work\":0,\"servers\":-58136669959.72248,\"other\":999994685800000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":999936549130040.2,\"work\":0,\"servers\":-58136669959.72248,\"other\":999994685800000,\"augmentations\":0}},\"scriptProdSinceLastAug\":0,\"exploits\":[\"YoureNotMeantToAccessThis\"],\"achievements\":[{\"ID\":\"DEVMENU\",\"unlockedOn\":1665066393287},{\"ID\":\"NS2\",\"unlockedOn\":1665066513286},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1665066573283},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1665066813284},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1665066813288},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1665066813292},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1665066813296},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1665066813301},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1665066813305},{\"ID\":\"TOR\",\"unlockedOn\":1665066813310}],\"terminalCommandHistory\":[\"ls -l\",\"run scan-tail.js\",\"nano scan-tail.js\",\"run scan-tail.js\",\"run servers.js\",\"servers.js buy peta 1048576\",\"run servers.js buy peta 1048576\",\"run scan-tail.js\",\"run analyze.js\",\"buy -l\",\"buy -a\",\"run scan-tail.js\",\"run fl1ght.exe\",\"ls -l\",\"ls test\",\"ls test/ports\",\"rm /test/ports\",\"rm /test/ports/starter.js\",\"rm /test/ports/worker.js\",\"rm killall.js\",\"rm scan-tail.js\",\"rm servers.js\",\"rm theory.js\",\"rm info.js\",\"rm batcher.js\",\"rm batcher-clean.js\",\"rm batcher-clean2.js\",\"rm analyze.js\",\"ls -l\",\"ls test\",\"ls test/ports\",\"rm test/ports.readme.txt\",\"rm test/ports/readme.txt\",\"ls lib\",\"rm lib/format.js\",\"rm lib/formulas.js\",\"ls remote\",\"rm remote/*\",\"rm remote/grow.js\",\"rm remote/grow2.js\",\"rm remote/weak2.js\",\"rm remote/weak.js\",\"rm remote/hack.js\",\"rm remote/hack2.js\",\"ls -l\",\"dir\",\"ls -l\",\"run scan-tail.js\",\"ls -l\",\"run scan-tail.js\"],\"focus\":false,\"currentWork\":null,\"identifier\":\"19d99e40757a44\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"3.6.4.7\",\"isConnectedTo\":true,\"maxRam\":512,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"Formulas.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// --- CONFIG SECTION ---\\r\\nconst testFile=\\\"batcher-clean.js\\\"; //File to run to initiate testing\\r\\nconst testFileArgs=[]; //Any arguments to be sent to the test file\\r\\nconst testTimeLimit=1000*60*60; //Graded time, default is 1hr.\\r\\n// --- END CONFIG SECTION ---\\r\\n\\r\\n\\r\\n/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let startTime = Date.now();\\r\\n  let startMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n  ns.run(testFile, 1, ...testFileArgs);\\r\\n  await ns.asleep(testTimeLimit);\\r\\n  let finishTime = Date.now();\\r\\n  let finishMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n  let message = `Finished testing after ${ns.nFormat((finishTime-startTime)/1000,\\\"0:00:00\\\")}. Money increased by ${ns.nFormat(finishMoney-startMoney,\\\"$0.00a\\\")}, effective profit is ${ns.nFormat((finishMoney-startMoney)*60000/(finishTime-startTime),\\\"$0.00a\\\")}/min`\\r\\n  console.log(message);\\r\\n  ns.tprint(message);\\r\\n}\",\"filename\":\"grader.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"let homeApps = {}\\n\\nconst showUsage = ns => {\\n\\tns.print('Usage: run scan.js (options)')\\n\\tns.print('\\t Options:')\\n\\tns.print('\\t\\t--push   \\t\\t\\t - re-push lib and remote files to all hosts')\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n  const format = {\\n    money: x => ns.nFormat(x, \\\"$0.00a\\\"),\\n    ram: x => {\\n      if (x > Math.pow(2,50)) return ns.nFormat(x / Math.pow(2,50), \\\"0,000\\\") + 'pb'\\n      if (x > Math.pow(2,40)) return ns.nFormat(x / Math.pow(2,40), \\\"0,000\\\") + 'tb'\\n      if (x > Math.pow(2,30)) return ns.nFormat(x / Math.pow(2,30), \\\"0,000\\\") + 'gb'\\n      if (x > Math.pow(2,20)) return ns.nFormat(x / Math.pow(2,20), \\\"0,000\\\") + 'mb'\\n      if (x > Math.pow(2,10)) return ns.nFormat(x / Math.pow(2,10), \\\"0,000\\\") + 'kb'\\n      return ns.nFormat(x, \\\"0,000\\\") + 'b'\\n    }\\n  }\\n\\tns.tail()\\n\\tns.ls('home', '.exe').forEach(x => homeApps[x] = true)\\n  await ns.asleep(10)\\n  ns.moveTail(320,200)\\n  ns.resizeTail(1280, 600)\\n\\tlet args = [...ns.args]\\n\\tlet optionPush = false\\n\\tfor (let i = 0; i < args.length;) {\\n\\t\\tconst optionName = `${args[i]}`;\\n\\t\\tif (optionName.substring(0, 2) === '--') {\\n\\t\\t\\targs.splice(i, 1)\\n\\t\\t\\tswitch (optionName) {\\n\\t\\t\\t\\tcase '--push':\\n\\t\\t\\t\\t\\toptionPush = true\\n\\t\\t\\t\\t\\tbreak\\n\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tns.print(`ERROR!  Unknown option '${optionName}'`)\\n\\t\\t\\t\\t\\tshowUsage(ns)\\n\\t\\t\\t\\t\\treturn\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\ti++\\n\\t\\t}\\n\\t}\\n\\t//let [target] = args\\n\\n\\tconst remoteFiles = [...(await ns.ls('home', 'remote/')),...(await ns.ls('home', 'lib/'))]\\n\\tns.print('remote files:')\\n\\tns.print(JSON.stringify(remoteFiles, null, 2))\\n\\n\\tconst parents = {}\\n\\tconst children = {}\\n\\tconst serverInfo = {}\\n\\tconst servers = []\\n\\tconst queue = []\\n\\tconst serverMessages = {}\\n\\tconst queued = {}\\n\\n\\tconst player = await ns.getPlayer()\\n\\n\\tconst doScan = async (host) => {\\n\\t\\tif (serverInfo[host]) return\\n\\t\\tservers.push(host)\\n\\t\\t// ns.print(`${host}: scanning...`)\\n\\t\\tvar server = await ns.getServer(host)\\n\\t\\tserverInfo[host] = server\\n\\t\\tchildren[host] = children[host] || []\\n\\n\\t\\t// hack server\\n\\t\\tif (!server.hasAdminRights) {\\n        \\tif (!(await hackPorts(ns, host, server))) {\\n            \\t// ns.print(`${host}: need more programs to nuke!`)\\n\\t\\t\\t\\tserverMessages[host] = 'Need to write more programs to nuke'\\n            \\treturn;\\n        \\t} else {\\n\\t\\t\\t\\tns.print(`${host}: nuking...`);\\n\\t\\t\\t\\tawait ns.nuke(host)\\n\\t\\t\\t\\tns.print(`${host}: NUKED!`)\\n\\n\\t\\t\\t\\t// install remote files\\n\\t\\t\\t\\tif (remoteFiles && remoteFiles.length > 0) {\\n\\t\\t\\t\\t\\tawait ns.scp(remoteFiles, host)\\n\\t\\t\\t\\t\\tns.print(`${host}: files copied`)\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else if (optionPush) {\\n\\t\\t\\t// install remote files\\n\\t\\t\\tif (remoteFiles && remoteFiles.length > 0) {\\n\\t\\t\\t\\tawait ns.scp(remoteFiles, host)\\n                ns.print(`${host}: files copied`)\\n\\t\\t\\t\\tawait ns.sleep(25)\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// backdoor\\n\\t\\tif (ns.installBackdoor && ns.connect && !server.backdoorInstalled) {\\n\\t\\t\\tns.print(`${host}: installing backdoor...`);\\n\\t\\t\\tawait ns.connect(host)\\n\\t\\t\\tawait ns.installBackdoor()\\n\\t\\t}\\n\\n\\t\\t// scan\\n\\t\\tconst connected = await ns.scan(host)\\n\\t\\tconnected.forEach(connectedHost => {\\n\\t\\t\\tif (!queued[connectedHost]) {\\n\\t\\t\\t\\tqueue.push(connectedHost)\\n\\t\\t\\t\\tqueued[connectedHost] = true\\n\\t\\t\\t\\tchildren[host].push(connectedHost)\\n\\t\\t\\t\\tparents[connectedHost] = parents[connectedHost] || []\\n\\t\\t\\t\\tparents[connectedHost].push(host)\\n\\t\\t\\t}\\n\\t\\t})\\n\\t}\\n\\n\\tqueued[ns.getHostname()] = true\\n\\tqueue.push(ns.getHostname())\\n\\twhile (queue.length > 0) {\\n\\t\\tawait doScan(queue.shift());\\n\\t}\\n\\n\\t// ok, we may have hacked some servers, so let's refresh their infos\\n\\tfor (let i = 0; i < servers.length; i++) {\\n\\t\\tlet host = servers[i]\\n\\t\\tserverInfo[host] = await ns.getServer(host)\\n\\t}\\n\\n  /**\\n   * Calculate maximum theoretical profit allowing for fractional threads.\\n   * \\n   * @param {number} ht - Hack Time (ms)\\n   * @param {number} hp - Hack Percent (actually fraction, i.e. 0.03 means hack 3% max money with one thread)\\n   * @param {number} gp - Grow Percent (actually growth, i.e. 1.002 means 0.2% growth per thread)\\n   * @param {number} mm - Max Money\\n   * @param {number} hc - Hack Chance (fraction)\\n   * @param {number} gb - Available Ram (gb)\\n   * @param {number} hexp - hackExp (per thread, should be for grow, weaken, successful hack, 1/4 for unsuccessful hack)\\n   */\\n   const theory = (ht, hp, gp, mm, hc, ram, hexp) => {\\n    const hackThreadRam = 1.7\\n    const growThreadRam = 1.75\\n    const weakenThreadRam = 1.75\\n\\n    const hackThreads = 1\\n    const hackMoney = mm * hackThreads * hp\\n    const remainingMoney = mm - hackMoney\\n    const percentNeeded = hackMoney / remainingMoney\\n    const growThreads = percentNeeded / (gp - 1)\\n    \\n    const instantaneousHackThreads = hackThreads\\n    \\n    // for each hack we need growThreads grow threads, and they run 4x the time\\n    const instantaneousGrowThreads = hackThreads * growThreads * 4\\n\\n    // for each grow thread running, we need 0.004 / 0.050 weaken threads, and they take 5/4 the time\\n    const instantaneousGrowWeakenThreads = instantaneousGrowThreads * 0.004 / 0.050 * 5 / 4\\n\\n    // for each hack thread running, we need 0.002 / 0.050 weaken threads, and they take 5x the time\\n    const instantaneousHackWeakenThreads = instantaneousHackThreads * 0.002 / 0.050 * 5\\n\\n    const instantaneousRam = instantaneousHackThreads * hackThreadRam\\n      + instantaneousGrowThreads * growThreadRam\\n      + (instantaneousGrowWeakenThreads + instantaneousHackWeakenThreads) * weakenThreadRam\\n\\n    // instantaneousRam used over a period of  ht (hackTime) gives us how much is used by 1 hack thread over 1 hack time\\n    // calculate hacks per gbms\\n    const hacksPerGbms = 1 / (instantaneousRam * ht)\\n\\n    // The instantaneous calculations are based on ht (hackTime), so they will take\\n    // instantaneousRam used for ht to produce hackMoney over the long run considering\\n    // we need to spread out the hacks, weakens, and grows.  So we take the given ram\\n    // divided by instantaneousRam to get how much we can produce in ht (hackTime) for\\n    // that much ram.  The units for the resulting humber are money/(gbms)\\n    const profitPerGbms = (hackMoney * hc) / (instantaneousRam * ht)\\n\\n    // our final results will be in profit / hour given the passed ram\\n    const gbms = ram * 3600000\\n    const profit = profitPerGbms * gbms\\n\\n    const totalHacks = hacksPerGbms * gbms\\n    const totalExpThreads = totalHacks * (hc + (1-hc)/4) // 1/4 the exp for failed hacks\\n      + (totalHacks) + (totalHacks * growThreads) // full xp for grow threads\\n      + totalHacks * 0.002 / 0.050 // full xp for weakens needed for hack\\n      + totalHacks * growThreads * 0.004 / 0.050 // full xp for weakens needed for grows\\n    const hackExp = hexp * totalExpThreads\\n    return { profit, growThreads, hackExp }\\n  }\\n\\n  let totalRam = 0\\n  const getTotalRam = () => {\\n    if (!totalRam) {\\n      totalRam = Object.entries(serverInfo).map(x => x[1]).filter(x => x.hasAdminRights).reduce((p, c) => p + c.maxRam, 0)\\n    }\\n    return totalRam\\n  }\\n\\n  /** @param {Server} server */\\n  const profitForServer = (server) => {\\n    if (server.requiredHackingSkill > player.skills.hacking) return 0\\n    if (server.moneyMax < 1) return 0\\n    const prepped = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax}\\n    const ram = getTotalRam()\\n    const ht = ns.formulas.hacking.hackTime(prepped, player)\\n    const hp = ns.formulas.hacking.hackPercent(prepped, player)\\n    const gp = ns.formulas.hacking.growPercent(prepped, 1, player, 1)\\n    const mm = prepped.moneyMax\\n    const hc = ns.formulas.hacking.hackChance(prepped, player)\\n    const hexp = ns.formulas.hacking.hackExp(server, player)\\n    const { profit } = theory(ht, hp, gp, mm, hc, ram, hexp)\\n    return profit\\n  }\\n\\n\\tconst reportWithChildren = (host, level = 0) => {\\n\\t\\tconst server = serverInfo[host]\\n    // output will be tabbed basec on level (2 spaces)\\n\\t\\tconst padding = \\\"\\\".padStart(level * 2, ' ')\\n\\t\\tconst cores = `${server.cpuCores} core${server.cpuCores > 1 ? 's' : ''}`\\n\\t\\tconst ram = ns.nFormat(server.maxRam * Math.pow(2, 30), \\\"0,000\\\") // it's in GB\\n\\t\\tconst arr = []\\n\\t\\tlet displayName = host\\n\\t\\tif (server.hasAdminRights) arr.push('ADMIN')\\n\\t\\tif (server.backdoorInstalled) {\\n\\t\\t\\tdisplayName = `[${host}]`\\n\\t\\t\\tarr.push('BACKDOOR')\\n\\t\\t}\\n\\t\\t\\n\\t\\tlet hackingDiff = Math.trunc(player.skills.hacking - server.requiredHackingSkill)\\n\\t\\tif (hackingDiff > 0) arr.push('CANHACK')\\n\\t\\tarr.push(`Hacking${hackingDiff >= 0 ? '+' : ''}${hackingDiff}`)\\n\\n\\t\\tns.print(`${padding}${displayName} ${cores} ${ram} [${arr.join(',')}] ${server.maxRam} ${format.money(server.moneyAvailable)}/${format.money(server.moneyMax)} ${server.hackDifficulty}/${server.minDifficulty} diff, ${server.serverGrowth} growth`)\\n\\n\\t\\tfor (let i = 0; i < children[host].length; i++) {\\n\\t\\t\\treportWithChildren(children[host][i], level + 1)\\n\\t\\t}\\n\\t}\\n\\n\\t// report on all servers, starting with our current one\\n\\tns.print('--------------------------------------------------------------------------------')\\n\\treportWithChildren(ns.getHostname())\\n\\n\\tns.print('--------------------------------------------------------------------------------')\\n\\tlet moneyServers = [...servers].sort((a, b) => {\\n\\t\\treturn serverInfo[a].moneyMax - serverInfo[b].moneyMax\\n\\t})\\n\\tlet maxServerLength = servers.reduce((p, c) => Math.max(c.length, p), 0)\\n\\tfor (let i = 0; i < moneyServers.length; i++) {\\n\\t\\tconst host = moneyServers[i]\\n\\t\\tconst server = serverInfo[host]\\n\\t\\tconst name = host.padEnd(maxServerLength, ' ')\\n\\t\\tconst money1 = `${format.money(server.moneyAvailable)}`.padStart(12)\\n\\t\\tconst money2 = `${format.money(server.moneyMax)} `.padStart(12)\\n\\t\\tconst growth = `growth: ${server.serverGrowth}`.padEnd(12)\\n\\t\\tconst difficulty = `${Math.trunc(server.hackDifficulty)}/${server.minDifficulty}`.padEnd(7)\\n\\t\\tconst ram = format.ram((server.maxRam - server.ramUsed) * Math.pow(2, 30)).padEnd(7)\\n\\t\\tconst ramMax = format.ram(server.maxRam * Math.pow(2, 30)).padEnd(7)\\n\\t\\tconst arr = []\\n\\t\\tlet displayName = host\\n\\t\\tif (server.hasAdminRights) arr.push('ADMIN')\\n\\t\\tif (server.backdoorInstalled) {\\n\\t\\t\\tdisplayName = `[${host}]`\\n\\t\\t\\tarr.push('BACKDOOR')\\n\\t\\t}\\n    const profit = ns.nFormat(profitForServer(server), \\\"$0.0a\\\").padStart(7)\\n\\t\\tlet hackingDiff = Math.trunc(player.skills.hacking - server.requiredHackingSkill)\\n\\t\\tif (hackingDiff > 0) arr.push('CANHACK')\\n\\t\\tarr.push(`${server.requiredHackingSkill}${hackingDiff >= 0 ? '+' : ''}${hackingDiff}`)\\n\\t\\tns.print(`${name} ${money1} ${money2} ${growth} ${difficulty} ${ram} ${ramMax} ${profit} [${arr.join(',')}]`)\\n\\t}\\n}\\n\\n/// Automatically hack the ports on server required for nuking if possible\\nconst hackPorts = async (ns, host, server) => {\\n    const portApps = [\\n        [ns.ftpcrack, server.ftpPortOpen, 'FTPCrack.exe'],\\n        [ns.brutessh, server.sshPortOpen, 'BruteSSH.exe'],\\n        [ns.httpworm, server.httpPortOpen, 'HTTPWorm.exe'],\\n        [ns.sqlinject, server.sqlPortOpen, 'SQLInject.exe' ],\\n        [ns.relaysmtp, server.smtpPortOpen, 'relaySMTP.exe']\\n    ]\\n\\n    let portsNeeded = server.numOpenPortsRequired - server.openPortCount\\n    let needed = []\\n\\n    for (let i = 0; i < portApps.length && portsNeeded > 0; i++) {\\n        const [fn, flag, name] = portApps[i]\\n        if (flag) {\\n            //ns.print(`Already open: ${name}`)\\n            continue;\\n        }\\n        if (!fn) {\\n            needed.push(name);\\n            //ns.print(`Need to write ${name}`)\\n            continue;\\n        }\\n        if (!homeApps[name]) {\\n            needed.push(name);\\n            //ns.print(`Missing program ${name}`)\\n            continue;\\n        }\\n\\n        ns.print(`Running ${name}...`)\\n        await fn(host)\\n        portsNeeded--\\n    }\\n\\n    if (portsNeeded > 0) {\\n        ns.print(`'${host}': needs ${portsNeeded} more ports open (write ${needed.join(', ')}).`)\\n        return false;\\n    }\\n\\n    return true;\\n}\",\"filename\":\"scan-tail.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"scan-tail.js\",\"url\":\"blob:http://localhost:8000/55e9a9d9-8d64-4fef-a454-669dd9e99531\",\"moduleSequenceNumber\":15771}],\"dependents\":[],\"ramUsage\":69.45,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":15771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"peta\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"46.9.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"ecorp\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"ecorp\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"ecorp\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"ecorp\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"ecorp\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"ecorp\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"ecorp\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"ecorp\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":944803699350,\"moneyMax\":944803699350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1351,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"32.8.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"megacorp\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"megacorp\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"megacorp\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"megacorp\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"megacorp\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"megacorp\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"megacorp\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"megacorp\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":1047273191550,\"moneyMax\":1047273191550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1132,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"82.7.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"b-and-a\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"b-and-a\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"b-and-a\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"b-and-a\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"b-and-a\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"b-and-a\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"b-and-a\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"b-and-a\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":441387916250,\"moneyMax\":441387916250,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":926,\"serverGrowth\":61}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"37.7.7.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":30,\"minDifficulty\":30,\"moneyAvailable\":830807337075,\"moneyMax\":830807337075,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1043,\"serverGrowth\":58}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"11.2.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nwo\",\"moduleSequenceNumber\":595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nwo\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"nwo\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"nwo\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nwo\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nwo\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"nwo\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"nwo\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":608983141925,\"moneyMax\":608983141925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1194,\"serverGrowth\":70}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"39.8.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"clarkinc\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"clarkinc\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"clarkinc\",\"moduleSequenceNumber\":605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"clarkinc\",\"moduleSequenceNumber\":606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"clarkinc\",\"moduleSequenceNumber\":607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"clarkinc\",\"moduleSequenceNumber\":608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"clarkinc\",\"moduleSequenceNumber\":609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"clarkinc\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":424310365100,\"moneyMax\":424310365100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1173,\"serverGrowth\":52}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"72.2.2.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":31,\"minDifficulty\":31,\"moneyAvailable\":431145798875,\"moneyMax\":431145798875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1012,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"18.3.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"4sigma\",\"moduleSequenceNumber\":619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"4sigma\",\"moduleSequenceNumber\":620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"4sigma\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"4sigma\",\"moduleSequenceNumber\":622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"4sigma\",\"moduleSequenceNumber\":623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"4sigma\",\"moduleSequenceNumber\":624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"4sigma\",\"moduleSequenceNumber\":625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"4sigma\",\"moduleSequenceNumber\":626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"helios\",\"nwo\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":538536023600,\"moneyMax\":538536023600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1119,\"serverGrowth\":87}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"28.4.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":628,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":633,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":682747279350,\"moneyMax\":682747279350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1020,\"serverGrowth\":91}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"8.4.2.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":638,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":30,\"minDifficulty\":30,\"moneyAvailable\":35697125050,\"moneyMax\":35697125050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1188,\"serverGrowth\":81}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"43.0.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":643,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":25000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1554,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"33.2.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"stormtech\",\"moduleSequenceNumber\":651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"stormtech\",\"moduleSequenceNumber\":652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"stormtech\",\"moduleSequenceNumber\":653,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"stormtech\",\"moduleSequenceNumber\":654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"stormtech\",\"moduleSequenceNumber\":655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"stormtech\",\"moduleSequenceNumber\":656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"stormtech\",\"moduleSequenceNumber\":657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"stormtech\",\"moduleSequenceNumber\":658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":27437271375,\"moneyMax\":27437271375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":906,\"serverGrowth\":85}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"23.9.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"defcomm\",\"moduleSequenceNumber\":659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"defcomm\",\"moduleSequenceNumber\":660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"defcomm\",\"moduleSequenceNumber\":661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"defcomm\",\"moduleSequenceNumber\":662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"defcomm\",\"moduleSequenceNumber\":663,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"defcomm\",\"moduleSequenceNumber\":664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"defcomm\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"defcomm\",\"moduleSequenceNumber\":666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":22631968525,\"moneyMax\":22631968525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1043,\"serverGrowth\":49}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"67.5.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"infocomm\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"infocomm\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"infocomm\",\"moduleSequenceNumber\":669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"infocomm\",\"moduleSequenceNumber\":670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"infocomm\",\"moduleSequenceNumber\":671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"infocomm\",\"moduleSequenceNumber\":672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"infocomm\",\"moduleSequenceNumber\":673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"infocomm\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"zeus-med\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":19115211625,\"moneyMax\":19115211625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":886,\"serverGrowth\":66}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"1.3.6.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":13954772100,\"moneyMax\":13954772100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":801,\"serverGrowth\":73}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"33.5.8.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"titan-labs\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":18283234025,\"moneyMax\":18283234025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":879,\"serverGrowth\":73}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"7.2.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"icarus\",\"moduleSequenceNumber\":691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"icarus\",\"moduleSequenceNumber\":692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"icarus\",\"moduleSequenceNumber\":693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"icarus\",\"moduleSequenceNumber\":694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"icarus\",\"moduleSequenceNumber\":695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"icarus\",\"moduleSequenceNumber\":696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"icarus\",\"moduleSequenceNumber\":697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"icarus\",\"moduleSequenceNumber\":698,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":30,\"minDifficulty\":30,\"moneyAvailable\":24432183550,\"moneyMax\":24432183550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":917,\"serverGrowth\":92}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"99.5.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":28014396625,\"moneyMax\":28014396625,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":890,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"50.5.5.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":708,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":20683726175,\"moneyMax\":20683726175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":858,\"serverGrowth\":72}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"78.7.0.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":718,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":14595537400,\"moneyMax\":14595537400,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":870,\"serverGrowth\":87}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"76.4.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":728,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":20558715950,\"moneyMax\":20558715950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":922,\"serverGrowth\":78}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"47.9.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":738,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":19489528825,\"moneyMax\":19489528825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":830,\"serverGrowth\":80}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"96.6.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"aerocorp\",\"moduleSequenceNumber\":739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"aerocorp\",\"moduleSequenceNumber\":740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"aerocorp\",\"moduleSequenceNumber\":741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"aerocorp\",\"moduleSequenceNumber\":742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"aerocorp\",\"moduleSequenceNumber\":743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"aerocorp\",\"moduleSequenceNumber\":744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"aerocorp\",\"moduleSequenceNumber\":745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"aerocorp\",\"moduleSequenceNumber\":746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":29357003000,\"moneyMax\":29357003000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":921,\"serverGrowth\":55}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"64.7.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":748,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":24217222325,\"moneyMax\":24217222325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":880,\"serverGrowth\":66}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-3858.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[106,160,77,22,148,117,65,32,99,52,27,55,144,71,194,79,162,168,138,83,139,62,139,25,53,127,192,142,52,77,74],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"30.3.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zb-def\",\"moduleSequenceNumber\":755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zb-def\",\"moduleSequenceNumber\":756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"zb-def\",\"moduleSequenceNumber\":757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"zb-def\",\"moduleSequenceNumber\":758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zb-def\",\"moduleSequenceNumber\":759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zb-def\",\"moduleSequenceNumber\":760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zb-def\",\"moduleSequenceNumber\":761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"zb-def\",\"moduleSequenceNumber\":762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":18,\"minDifficulty\":18,\"moneyAvailable\":23161543600,\"moneyMax\":23161543600,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":814,\"serverGrowth\":75}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"10.9.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":24601453325,\"moneyMax\":24601453325,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":779,\"serverGrowth\":72}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"17.9.9.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":778,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":20886366525,\"moneyMax\":20886366525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":763,\"serverGrowth\":79}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"6.9.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"deltaone\",\"moduleSequenceNumber\":779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"deltaone\",\"moduleSequenceNumber\":780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"deltaone\",\"moduleSequenceNumber\":781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"deltaone\",\"moduleSequenceNumber\":782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"deltaone\",\"moduleSequenceNumber\":783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"deltaone\",\"moduleSequenceNumber\":784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"deltaone\",\"moduleSequenceNumber\":785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"deltaone\",\"moduleSequenceNumber\":786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"global-pharm\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":33068839300,\"moneyMax\":33068839300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":838,\"serverGrowth\":56}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"90.8.5.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":27,\"minDifficulty\":27,\"moneyAvailable\":39727476975,\"moneyMax\":39727476975,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":756,\"serverGrowth\":89}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"19.9.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nova-med\",\"moduleSequenceNumber\":795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nova-med\",\"moduleSequenceNumber\":796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"nova-med\",\"moduleSequenceNumber\":797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"nova-med\",\"moduleSequenceNumber\":798,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nova-med\",\"moduleSequenceNumber\":799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nova-med\",\"moduleSequenceNumber\":800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"nova-med\",\"moduleSequenceNumber\":801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"nova-med\",\"moduleSequenceNumber\":802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":31056069775,\"moneyMax\":31056069775,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":780,\"serverGrowth\":84}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"64.7.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":806,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"zeus-med\",\"moduleSequenceNumber\":810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":28,\"minDifficulty\":28,\"moneyAvailable\":33811607475,\"moneyMax\":33811607475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":806,\"serverGrowth\":72}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"13.5.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":812,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":814,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":816,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":818,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":25,\"minDifficulty\":25,\"moneyAvailable\":26664890575,\"moneyMax\":26664890575,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":779,\"serverGrowth\":75}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"26.1.7.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":820,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":822,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":824,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":825,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":826,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"catalyst\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":17995224225,\"moneyMax\":17995224225,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":725,\"serverGrowth\":65}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"94.1.1.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":827,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":828,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":830,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":834,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"catalyst\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":18,\"minDifficulty\":18,\"moneyAvailable\":16162823125,\"moneyMax\":16162823125,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":482,\"serverGrowth\":48}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"59.7.7.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":835,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":836,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":838,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":840,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":841,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":19,\"minDifficulty\":19,\"moneyAvailable\":15439499650,\"moneyMax\":15439499650,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":514,\"serverGrowth\":50}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"16.0.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":843,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":844,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":845,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":846,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":848,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":849,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":7740248850,\"moneyMax\":7740248850,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":422,\"serverGrowth\":45}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"98.1.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":851,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":853,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":856,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":858,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":16,\"minDifficulty\":16,\"moneyAvailable\":5047858350,\"moneyMax\":5047858350,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":396,\"serverGrowth\":45}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"78.2.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":859,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":860,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":27190623800,\"moneyMax\":27190623800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":774,\"serverGrowth\":82}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"36.3.8.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":16,\"minDifficulty\":16,\"moneyAvailable\":7726694900,\"moneyMax\":7726694900,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":460,\"serverGrowth\":55}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"27.4.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"syscore\",\"moduleSequenceNumber\":875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"syscore\",\"moduleSequenceNumber\":876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"syscore\",\"moduleSequenceNumber\":877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"syscore\",\"moduleSequenceNumber\":878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"syscore\",\"moduleSequenceNumber\":879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"syscore\",\"moduleSequenceNumber\":880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"syscore\",\"moduleSequenceNumber\":881,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"syscore\",\"moduleSequenceNumber\":882,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":23,\"minDifficulty\":23,\"moneyAvailable\":12494713550,\"moneyMax\":12494713550,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":599,\"serverGrowth\":64}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"54.9.3.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":883,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":884,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":886,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":887,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":888,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":889,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":890,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":9506904675,\"moneyMax\":9506904675,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":416,\"serverGrowth\":46}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"83.5.3.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":891,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":892,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":896,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":897,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":898,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"silver-helix\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":14,\"minDifficulty\":14,\"moneyAvailable\":4145237325,\"moneyMax\":4145237325,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":315,\"serverGrowth\":49}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"57.0.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"computek\",\"moduleSequenceNumber\":899,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"computek\",\"moduleSequenceNumber\":900,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"computek\",\"moduleSequenceNumber\":901,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"computek\",\"moduleSequenceNumber\":902,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"computek\",\"moduleSequenceNumber\":903,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"computek\",\"moduleSequenceNumber\":904,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"computek\",\"moduleSequenceNumber\":905,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"computek\",\"moduleSequenceNumber\":906,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":6152612050,\"moneyMax\":6152612050,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":320,\"serverGrowth\":55}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"80.6.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":907,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":908,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":909,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":910,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":911,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":6875000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":382,\"serverGrowth\":48}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"2.5.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":915,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":916,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":917,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":918,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":919,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":920,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":921,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":922,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"omega-net\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":19,\"minDifficulty\":19,\"moneyAvailable\":1775281425,\"moneyMax\":1775281425,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":260,\"serverGrowth\":61}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"34.2.2.2\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":923,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":924,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":925,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":926,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":930,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"19.8.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":932,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":933,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":938,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":50000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"96.6.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":940,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":941,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":942,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":943,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":944,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":945,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":946,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":57500000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"85.3.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":947,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":948,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":949,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":950,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":951,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":952,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":953,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":954,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":62500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"59.6.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":955,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":956,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":958,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":959,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":960,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":961,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":962,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"n00dles\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":187500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"87.2.0.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":963,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":964,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":965,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":966,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":967,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":968,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":969,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":970,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":68750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"95.8.7.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":971,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":972,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":973,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":974,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":975,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":976,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":977,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":978,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"max-hardware\",\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":125000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"50.3.7.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":979,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":980,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":981,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":982,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":983,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":984,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":985,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":986,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":1125000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"8.2.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":987,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":988,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":989,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":990,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":991,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":992,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":993,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"1.0.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":995,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":996,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":997,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":998,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":999,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1000,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1001,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1002,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"63.5.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":1003,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":1004,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":1005,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":1006,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":1007,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":1008,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":1009,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":1010,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"CSEC\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"2.2.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1011,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1012,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1013,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1014,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1015,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1016,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1017,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1018,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"0.6.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":1019,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":1020,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":1021,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":1022,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":1023,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":1024,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":1025,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":1026,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"zer0\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":34,\"hackDifficulty\":11,\"minDifficulty\":11,\"moneyAvailable\":1624188425,\"moneyMax\":1624188425,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":183,\"serverGrowth\":33}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"23.0.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1027,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1028,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1029,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1030,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1031,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1032,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1033,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":1034,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":1317816825,\"moneyMax\":1317816825,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":249,\"serverGrowth\":30}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"68.8.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1036,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1037,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1038,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1039,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1040,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1041,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1042,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":500000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"66.1.2.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1043,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1044,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1045,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1046,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1047,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1048,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1049,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":1050,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":16,\"minDifficulty\":16,\"moneyAvailable\":6250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":482,\"serverGrowth\":40}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"79.1.1.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1051,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1052,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1053,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1054,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1055,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1056,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1057,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":1058,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"4sigma\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":19,\"minDifficulty\":19,\"moneyAvailable\":22500000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1010,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"96.9.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1059,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1060,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1061,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1062,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1063,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1064,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1065,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":1066,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":16,\"minDifficulty\":16,\"moneyAvailable\":11250000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":686,\"serverGrowth\":45}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"33.8.7.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1067,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1068,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1069,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1070,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1071,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1072,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1073,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1074,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"infocomm\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":530,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"97.5.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1075,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1076,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1077,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1079,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1080,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":1082,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":356,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"47.6.3.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1083,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1084,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1085,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1086,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1087,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1088,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1089,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1090,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":216,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"26.1.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":1091,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":1092,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":1093,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":1094,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":1095,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":1096,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":1097,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":1098,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"vitalife\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":549,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"28.2.3.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":1099,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":1100,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":1101,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":1102,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":1103,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":1104,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":1105,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":1106,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":53,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"87.6.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1107,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1108,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1109,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1111,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1112,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1113,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"The-Cave\",\"moduleSequenceNumber\":1114,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"48.5.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"50.2.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"darkweb\",\"moduleSequenceNumber\":1115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getGrowTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'grow', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.grow(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'grow', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/grow2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"darkweb\",\"moduleSequenceNumber\":1116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"darkweb\",\"moduleSequenceNumber\":1117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getHackTime(target)\\r\\n  let eEnd = start + time\\r\\n\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'hack', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  let result = await ns.hack(target)\\r\\n\\r\\n  let end = new Date().valueOf()\\r\\n  msg = JSON.stringify({ id, message: 'end', command: 'hack', end, result })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/hack2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"darkweb\",\"moduleSequenceNumber\":1118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  const obj = eval(\\\"window.obj\\\") // 'CHEAT', but just for debugging\\r\\n\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      obj.errors[obj.errors.length] = msg\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    // time = ns.getWeakenTime(target)\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        obj.errors[obj.errors.length] = msg\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"darkweb\",\"moduleSequenceNumber\":1119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  let [target, id, command, port, time] = ns.args\\r\\n  port = port || 5\\r\\n  const handle = ns.getPortHandle(port)\\r\\n  const handle2 = ns.getPortHandle(port + 1)\\r\\n\\r\\n  // weakens are different, they run continuously so we loop\\r\\n  let count = 0\\r\\n  let start = new Date().valueOf()\\r\\n  // let time = ns.getWeakenTime(target)\\r\\n  let eEnd = start + time\\r\\n  let end = null\\r\\n  let result = null\\r\\n  let msg = JSON.stringify({ id, message: 'start', command: 'weak', start, time, eEnd })\\r\\n  if (!handle.tryWrite(msg)) {\\r\\n    if (!handle2.tryWrite(msg)) {\\r\\n      ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  while (true) {\\r\\n    result = await ns.weaken(target)\\r\\n\\r\\n    end = new Date().valueOf()\\r\\n    start = end\\r\\n    eEnd = start + time\\r\\n    count++\\r\\n    msg = JSON.stringify({ id, message: 'continue', command: 'weak', start, time, eEnd, end, result, count })\\r\\n    if (!handle.tryWrite(msg)) {\\r\\n      if (!handle2.tryWrite(msg)) {\\r\\n        ns.tprint(`ERROR: ${JSON.stringify(msg)}`)\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"filename\":\"/remote/weak2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"darkweb\",\"moduleSequenceNumber\":1120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const money = money => {\\n\\tconst postfix = 'k m b t q Q s S o n'.split(' ')\\n\\tconst powers = '3 6 9 12 15 18 21 24 27 30'.split(' ').map(x => parseInt(x)) // higher shows in exponent format\\n\\tconst sign = money >= 0 ? '' : '-'\\n\\tmoney = Math.abs(money)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(10, powers[i]);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000;\\n\\t\\t\\treturn `$${sign}${fm}${postfix[i]}`;\\n\\t\\t}\\n\\t}\\n\\n\\tfor (let i = 30; i < 303; i += 3) {\\n\\t\\tconst pow = Math.pow(10, i);\\n\\t\\tif (money < (1000 * pow)) {\\n\\t\\t\\tlet fm = Math.trunc(money / pow * 1000)/ 1000\\n\\t\\t\\treturn `$${sign}${fm}e+${i}`\\n\\t\\t}\\n\\t}\\n}\\n\\nexport const short = short => {\\n\\tconst sign = short >= 0 ? '' : '-'\\n\\tshort = Math.abs(short)\\n    if (short < 1000000) return `${sign}${Math.trunc(short*100)/100}`\\n\\tconst exp = Math.trunc(Math.log10(short) / 3) * 3\\n\\tconst num = Math.trunc(short * 1000 / Math.pow(10, exp)) / 1000\\n\\treturn `${sign}${num}e${exp}`\\n}\\n\\n\\nexport const ram = ram => {\\n\\tconst postfix = 'KB MB GB TB PB EB ZB YB'.split(' ')\\n\\tconst powers = [10, 20, 30, 40, 50, 60, 70, 80]\\n\\tconst sign = ram >= 0 ? '' : '-'\\n\\tram = Math.abs(ram)\\n\\n\\tfor (let i = 0; i < postfix.length; i++) {\\n\\t\\tconst pow = Math.pow(2, powers[i])\\n\\t\\tif (ram < pow * 1024 || i === (postfix.length - 1)) {\\n\\t\\t\\tlet div = ram / pow\\n\\t\\t\\tdiv = Math.trunc(div * 10) / 10\\n\\t\\t\\treturn `${sign}${div}${postfix[i]}`\\n\\t\\t}\\n\\t}\\n\\treturn `${Math.trunc(ram)}`\\n}\\n\\nexport const gb = gb => ram(gb * Math.pow(2, 30))\\n\\n// https://talyian.github.io/ansicolors/\\nexport const colors = {\\n\\treset: '\\\\x1b[0m',\\n\\tbasicBlack: '\\\\x1b[30m',\\n\\tbasicRed: '\\\\x1b[31m',\\n\\tbasicGreen: '\\\\x1b[32m',\\n\\tbasicYellow: '\\\\x1b[33m',\\n\\tbasicBlue: '\\\\x1b[34m',\\n\\tbasicMagenta: '\\\\x1b[35m',\\n\\tbasicCyan: '\\\\x1b[36m',\\n\\tbasicWhite: '\\\\x1b[37m',\\n\\tbgBasicBlack: '\\\\x1b[40m',\\n\\tbgBasicRed: '\\\\x1b[41m',\\n\\tbgBasicGreen: '\\\\x1b[42m',\\n\\tbgBasicYellow: '\\\\x1b[43m',\\n\\tbgBasicBlue: '\\\\x1b[44m',\\n\\tbgBasicMagenta: '\\\\x1b[45m',\\n\\tbgBasicCyan: '\\\\x1b[46m',\\n\\tbgBasicWhite: '\\\\x1b[47m',\\n\\tsrgb: (r,g,b) => `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple color 0-5\\n\\tgray: v => `\\\\x1b[38;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23\\n\\tbgGray: v => `\\\\x1b[48;5;${232 + Math.max(0, Math.min(23, v))}m`, // from 0-23, 23 being white\\n\\tbgsrgb: (r,g,b) => `\\\\x1b[48;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`, // simple background 0-5\\n\\tbgfrom: (...values) => colors.from(...values).replace('38', '48'),\\n\\tfrom: (...values) => {\\n\\t\\t// look for hex specifier\\n\\t\\tif (values.length === 1 && typeof(values[0]) === 'string' && values[0][0] === '#') {\\n\\t\\t\\tlet hex = values[0]\\n\\t\\t\\tif (hex.length === 4) {\\n\\t\\t\\t\\thex = `#${hex[1]+hex[1]+hex[2]+hex[2]+hex[3]+hex[3]}`\\n\\t\\t\\t}\\n\\t\\t\\t/** @param {string} str */\\n\\t\\t\\tconst fromHex = (str, pos) => {\\n\\t\\t\\t\\tlet value = parseInt(str.substring(pos, pos + 2), 16)\\n\\t\\t\\t\\tvalue = Math.min(255, Math.max(0, value))\\n\\t\\t\\t\\t// divide 256 by 6...  about 43 per\\n\\t\\t\\t\\tvalue = Math.ceil(value * 6 / 256)\\n\\t\\t\\t}\\n\\t\\t\\tlet r = fromHex(hex, 1), g = fromHex(hex, 2), b = fromHex(hex, 3)\\n\\t\\t\\treturn `\\\\x1b[38;5;${16 + 36 * Math.min(5, Math.max(r, 0)) + 6 * Math.min(5, Math.max(r, 0)) + Math.min(5, Math.max(r, 0))}m`\\n\\t\\t}\\n\\t}\\n}\\n\\nconst createThemeFunc = color => {\\n\\treturn (str) => str ? color + str + theme.reset() : color\\n}\\n\\nexport const theme = {\\n\\tcolors: {\\n\\t\\t// reset: colors.gray(20) + '\\\\x1b[40m',\\n\\t\\t//reset: colors.basicRed + '\\\\x1b[40m',\\n\\t\\treset: '\\\\x1b[40m', // setting background to black is enough to reset apparently\\n\\t\\thostname: '\\\\x1b[36m',\\n\\t\\terror: '\\\\x1b[38;5;1m',\\n\\t\\tsuccess: '\\\\x1b[38;5;2m',\\n\\t\\twarn: '\\\\x1b[38;5;3m',\\n\\t\\tinfo: '\\\\x1b[38;5;4m',\\n\\t\\tcommand: '\\\\x1b[38;5;5m',\\n\\t}\\n}\\n\\nObject.keys(theme.colors).forEach(key => theme[key] = str => str ? theme.colors[key] + str + theme.colors.reset : theme.colors[key])\\n\\nexport default {\\n  money,\\n  ram,\\n  short,\\n  gb\\n}\",\"filename\":\"/lib/format.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"darkweb\",\"moduleSequenceNumber\":1121,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const CONSTANTS = {\\n  VersionString: \\\"2.1.0\\\",\\n  VersionNumber: 25,\\n\\n  // Speed (in ms) at which the main loop is updated\\n  _idleSpeed: 200,\\n\\n  /** Max level for any skill, assuming no multipliers. Determined by max numerical value in javascript for experience\\n   * and the skill level formula in Player.js. Note that all this means it that when experience hits MAX_INT, then\\n   * the player will have this level assuming no multipliers. Multipliers can cause skills to go above this.\\n   */\\n  MaxSkillLevel: 975,\\n\\n  // Milliseconds per game cycle\\n  MilliPerCycle: 200,\\n\\n  // How much reputation is needed to join a megacorporation's faction\\n  CorpFactionRepRequirement: 400e3,\\n\\n  // Base RAM costs\\n  BaseCostFor1GBOfRamHome: 32000,\\n  BaseCostFor1GBOfRamServer: 55000, //1 GB of RAM\\n\\n  // Cost to travel to another city\\n  TravelCost: 200e3,\\n\\n  // Faction and Company favor-related things\\n  BaseFavorToDonate: 150,\\n  DonateMoneyToRepDivisor: 1e6,\\n  FactionReputationToFavorBase: 500,\\n  FactionReputationToFavorMult: 1.02,\\n  CompanyReputationToFavorBase: 500,\\n  CompanyReputationToFavorMult: 1.02,\\n\\n  // NeuroFlux Governor Augmentation cost multiplier\\n  NeuroFluxGovernorLevelMult: 1.14,\\n\\n  NumNetscriptPorts: 20,\\n\\n  // Server-related constants\\n  HomeComputerMaxRam: 1073741824, // 2 ^ 30\\n  ServerBaseGrowthRate: 1.03, // Unadjusted Growth rate\\n  ServerMaxGrowthRate: 1.0035, // Maximum possible growth rate (max rate accounting for server security)\\n  ServerFortifyAmount: 0.002, // Amount by which server's security increases when its hacked/grown\\n  ServerWeakenAmount: 0.05, // Amount by which server's security decreases when weakened\\n\\n  PurchasedServerLimit: 25,\\n  PurchasedServerMaxRam: 1048576, // 2^20\\n\\n  // Augmentation Constants\\n  MultipleAugMultiplier: 1.9,\\n\\n  // TOR Router\\n  TorRouterCost: 200e3,\\n\\n  // Stock market\\n  WSEAccountCost: 200e6,\\n  TIXAPICost: 5e9,\\n  MarketData4SCost: 1e9,\\n  MarketDataTixApi4SCost: 25e9,\\n  StockMarketCommission: 100e3,\\n\\n  // Hospital/Health\\n  HospitalCostPerHp: 100e3,\\n\\n  // Intelligence-related constants\\n  IntelligenceCrimeWeight: 0.025, // Weight for how much int affects crime success rates\\n  IntelligenceInfiltrationWeight: 0.1, // Weight for how much int affects infiltration success rates\\n  IntelligenceCrimeBaseExpGain: 0.05,\\n  IntelligenceProgramBaseExpGain: 0.1, // Program required hack level divided by this to determine int exp gain\\n  IntelligenceGraftBaseExpGain: 0.05,\\n  IntelligenceTerminalHackBaseExpGain: 200, // Hacking exp divided by this to determine int exp gain\\n  IntelligenceSingFnBaseExpGain: 1.5,\\n  IntelligenceClassBaseExpGain: 0.01,\\n\\n  // Time-related constants\\n  MillisecondsPer20Hours: 72000000,\\n  GameCyclesPer20Hours: 72000000 / 200,\\n\\n  MillisecondsPer10Hours: 36000000,\\n  GameCyclesPer10Hours: 36000000 / 200,\\n\\n  MillisecondsPer8Hours: 28800000,\\n  GameCyclesPer8Hours: 28800000 / 200,\\n\\n  MillisecondsPer4Hours: 14400000,\\n  GameCyclesPer4Hours: 14400000 / 200,\\n\\n  MillisecondsPer2Hours: 7200000,\\n  GameCyclesPer2Hours: 7200000 / 200,\\n\\n  MillisecondsPerHour: 3600000,\\n  GameCyclesPerHour: 3600000 / 200,\\n\\n  MillisecondsPerHalfHour: 1800000,\\n  GameCyclesPerHalfHour: 1800000 / 200,\\n\\n  MillisecondsPerQuarterHour: 900000,\\n  GameCyclesPerQuarterHour: 900000 / 200,\\n\\n  MillisecondsPerFiveMinutes: 300000,\\n  GameCyclesPerFiveMinutes: 300000 / 200,\\n\\n  // Player Work & Action\\n  BaseFocusBonus: 0.8,\\n\\n  ClassDataStructuresBaseCost: 40,\\n  ClassNetworksBaseCost: 80,\\n  ClassAlgorithmsBaseCost: 320,\\n  ClassManagementBaseCost: 160,\\n  ClassLeadershipBaseCost: 320,\\n  ClassGymBaseCost: 120,\\n\\n  ClassStudyComputerScienceBaseExp: 0.5,\\n  ClassDataStructuresBaseExp: 1,\\n  ClassNetworksBaseExp: 2,\\n  ClassAlgorithmsBaseExp: 4,\\n  ClassManagementBaseExp: 2,\\n  ClassLeadershipBaseExp: 4,\\n\\n  // Coding Contract\\n  // TODO: Move this into Coding contract implementation?\\n  CodingContractBaseFactionRepGain: 2500,\\n  CodingContractBaseCompanyRepGain: 4000,\\n  CodingContractBaseMoneyGain: 75e6,\\n\\n  // Augmentation grafting multipliers\\n  AugmentationGraftingCostMult: 3,\\n  AugmentationGraftingTimeBase: 3600000,\\n\\n  // SoA mults\\n  SoACostMult: 7,\\n  SoARepMult: 1.3,\\n\\n  // Value raised to the number of entropy stacks, then multiplied to player multipliers\\n  EntropyEffect: 0.98,\\n\\n  // BitNode/Source-File related stuff\\n  TotalNumBitNodes: 24,\\n\\n  InfiniteLoopLimit: 2000,\\n\\n  Donations: 25,\\n\\n  LatestUpdate: `\\nv2.1.0 - 2022-08-23\\n-------------------\\n\\n  * pending\\n  * nerf noodle bar\\n\\n`,\\n}\\n\\nexport const BitNodeMultipliers = {\\n  HackingLevelMultiplier: 1,\\n  StrengthLevelMultiplier: 1,\\n  DefenseLevelMultiplier: 1,\\n  DexterityLevelMultiplier: 1,\\n  AgilityLevelMultiplier: 1,\\n  CharismaLevelMultiplier: 1,\\n\\n  ServerGrowthRate: 1,\\n  ServerMaxMoney: 1,\\n  ServerStartingMoney: 1,\\n  ServerStartingSecurity: 1,\\n  ServerWeakenRate: 1,\\n\\n  HomeComputerRamCost: 1,\\n\\n  PurchasedServerCost: 1,\\n  PurchasedServerSoftcap: 1,\\n  PurchasedServerLimit: 1,\\n  PurchasedServerMaxRam: 1,\\n\\n  CompanyWorkMoney: 1,\\n  CrimeMoney: 1,\\n  HacknetNodeMoney: 1,\\n  ManualHackMoney: 1,\\n  ScriptHackMoney: 1, // normally different per bitnode.   BN4 is 0.2\\n  ScriptHackMoneyGain: 1,\\n  CodingContractMoney: 1,\\n\\n  ClassGymExpGain: 1,\\n  CompanyWorkExpGain: 1,\\n  CrimeExpGain: 1,\\n  FactionWorkExpGain: 1,\\n  HackExpGain: 1,\\n\\n  FactionPassiveRepGain: 1,\\n  FactionWorkRepGain: 1,\\n  RepToDonateToFaction: 1,\\n\\n  AugmentationMoneyCost: 1,\\n  AugmentationRepCost: 1,\\n\\n  InfiltrationMoney: 1,\\n  InfiltrationRep: 1,\\n\\n  FourSigmaMarketDataCost: 1,\\n  FourSigmaMarketDataApiCost: 1,\\n\\n  CorporationValuation: 1,\\n  CorporationSoftcap: 1,\\n\\n  BladeburnerRank: 1,\\n  BladeburnerSkillCost: 1,\\n\\n  GangSoftcap: 1,\\n  GangUniqueAugs: 1,\\n\\n  DaedalusAugsRequirement: 30,\\n\\n  StaneksGiftPowerMultiplier: 1,\\n  StaneksGiftExtraSize: 0,\\n\\n  WorldDaemonDifficulty: 1,\\n};\\n\\nexport function calculateIntelligenceBonus(intelligence, weight = 1) {\\n  return 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * Returns the chance the player has to successfully hack a server\\n */\\nexport function calculateHackingChance(server, player) {\\n  const hackFactor = 1.75;\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = hackFactor * player.skills.hacking;\\n  const skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n  const chance =\\n    skillChance *\\n    difficultyMult *\\n    player.mults.hacking_chance *\\n    calculateIntelligenceBonus(player.skills.intelligence, 1);\\n  if (chance > 1) {\\n    return 1;\\n  }\\n  if (chance < 0) {\\n    return 0;\\n  }\\n\\n  return chance;\\n}\\n\\n/**\\n * Returns the amount of hacking experience the player will gain upon\\n * successfully hacking a server\\n */\\nexport function calculateHackingExpGain(server, player) {\\n  const baseExpGain = 3;\\n  const diffFactor = 0.3;\\n  if (server.baseDifficulty == null) {\\n    server.baseDifficulty = server.hackDifficulty;\\n  }\\n  let expGain = baseExpGain;\\n  expGain += server.baseDifficulty * diffFactor;\\n\\n  return expGain * player.mults.hacking_exp * BitNodeMultipliers.HackExpGain;\\n}\\n\\n/**\\n * Returns the percentage of money that will be stolen from a server if\\n * it is successfully hacked (returns the decimal form, not the actual percent value)\\n */\\nexport function calculatePercentMoneyHacked(server, player) {\\n  // Adjust if needed for balancing. This is the divisor for the final calculation\\n  const balanceFactor = 240;\\n\\n  const difficultyMult = (100 - server.hackDifficulty) / 100;\\n  const skillMult = (player.skills.hacking - (server.requiredHackingSkill - 1)) / player.skills.hacking;\\n  const percentMoneyHacked =\\n    (difficultyMult * skillMult * player.mults.hacking_money * BitNodeMultipliers.ScriptHackMoney) / balanceFactor;\\n  if (percentMoneyHacked < 0) {\\n    return 0;\\n  }\\n  if (percentMoneyHacked > 1) {\\n    return 1;\\n  }\\n\\n  return percentMoneyHacked;\\n}\\n\\n/**\\n * Returns time it takes to complete a hack on a server, in seconds\\n */\\nexport function calculateHackingTime(server, player) {\\n  const difficultyMult = server.requiredHackingSkill * server.hackDifficulty;\\n\\n  const baseDiff = 500;\\n  const baseSkill = 50;\\n  const diffFactor = 2.5;\\n  let skillFactor = diffFactor * difficultyMult + baseDiff;\\n  // tslint:disable-next-line\\n  skillFactor /= player.skills.hacking + baseSkill;\\n\\n  const hackTimeMultiplier = 5;\\n  const hackingTime =\\n    (hackTimeMultiplier * skillFactor) /\\n    (player.mults.hacking_speed * calculateIntelligenceBonus(player.skills.intelligence, 1));\\n\\n  return hackingTime;\\n}\\n\\n/**\\n * Returns time it takes to complete a grow operation on a server, in seconds\\n */\\nexport function calculateGrowTime(server, player) {\\n  const growTimeMultiplier = 3.2; // Relative to hacking time. 16/5 = 3.2\\n  return growTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\n/**\\n * Returns time it takes to complete a weaken operation on a server, in seconds\\n */\\nexport function calculateWeakenTime(server, player) {\\n  const weakenTimeMultiplier = 4; // Relative to hacking time\\n  return weakenTimeMultiplier * calculateHackingTime(server, player);\\n}\\n\\nexport function calculateServerGrowth(server, threads, player, cores = 1) {\\n  const numServerGrowthCycles = Math.max(Math.floor(threads), 0);\\n\\n  //Get adjusted growth rate, which accounts for server security\\n  const growthRate = CONSTANTS.ServerBaseGrowthRate;\\n  let adjGrowthRate = 1 + (growthRate - 1) / server.hackDifficulty;\\n  if (adjGrowthRate > CONSTANTS.ServerMaxGrowthRate) {\\n    adjGrowthRate = CONSTANTS.ServerMaxGrowthRate;\\n  }\\n\\n  //Calculate adjusted server growth rate based on parameters\\n  const serverGrowthPercentage = server.serverGrowth / 100;\\n  const numServerGrowthCyclesAdjusted =\\n    numServerGrowthCycles * serverGrowthPercentage * BitNodeMultipliers.ServerGrowthRate;\\n\\n  //Apply serverGrowth for the calculated number of growth cycles\\n  const coreBonus = 1 + (cores - 1) / 16;\\n  return Math.pow(adjGrowthRate, numServerGrowthCyclesAdjusted * player.mults.hacking_grow * coreBonus);\\n}\\n\\nexport function calculateAll(server, player, threads = 1, cores = 1) {\\n  return {\\n    hackChance: calculateHackingChance(server, player),\\n    hackExp: calculateHackingExpGain(server, player),\\n    hackPercent: calculatePercentMoneyHacked(server, player),\\n    growPercent: calculateServerGrowth(server, threads, player, cores),\\n    hackTime: calculateHackingTime(server, player) * 1000,\\n    growTime: calculateGrowTime(server, player) * 1000,\\n    weakenTime: calculateWeakenTime(server, player) * 1000,\\n\\n    // extra info\\n    intelligenceBonus: calculateIntelligenceBonus(player.intelligence),\\n    security: {\\n      raisedByHack: 0.002 * threads,\\n      raisedByGrow: 0.004 * threads,\\n      loweredByWeaken: 0.050 * threads,\\n      lowerThreadsNeeded: (server.hackDifficulty - server.minDifficulty) / 0.050,\\n    }\\n  }\\n}\\n\\nexport function analyze(server, player) {\\n  let preppedServer = {...server, hackDifficulty: server.minDifficulty, moneyAvailable: server.moneyMax }\\n  let current = {}\\n  let prepped = {}\\n  let keys = ['hackChance', 'hackExp', 'hackPercent', 'growPercent', 'hackTime', 'growTime', 'weakenTime']\\n  keys.forEach(key => {\\n    current[key] = key === 'growPercent' ? mine[key](server, 1, player, 1) : mine[key](server, player)\\n    prepped[key] = key === 'growPercent' ? mine[key](preppedServer, 1, player, 1) : mine[key](preppedServer, player)\\n  })\\n\\n\\tconst moneyNeeded = server.moneyMax - server.moneyAvailable\\n\\tconst percentNeeded = moneyNeeded / server.moneyAvailable\\n\\t\\n  const growsNeeded = percentNeeded / (current.growPercent - 1)\\n  const weakensNeeded = (server.hackDifficulty - server.minDifficulty) / 0.050\\n\\tconst totalWeakensNeeded = weakensNeeded + Math.ceil(growsNeeded * 0.004 / 0.050)\\n\\n  let result = {\\n    current, prepped, currentServer: server, preppedServer,\\n    growsNeeded, weakensNeeded, totalWeakensNeeded,\\n  }\\n\\n  return result\\n}\\n\\nconst mine = {\\n  hackChance: (server, player) => calculateHackingChance(server, player),\\n  hackExp: (server, player) => calculateHackingExpGain(server, player), // needs BitNodeModifiers\\n  hackPercent: (server, player) => calculatePercentMoneyHacked(server, player),\\n  growPercent: (server, threads, player, cores = 1) => calculateServerGrowth(server, threads, player, cores),\\n  hackTime: (server, player) => calculateHackingTime(server, player) * 1000,\\n  growTime: (server, player) => calculateGrowTime(server, player) * 1000,\\n  weakenTime: (server, player) => calculateWeakenTime(server, player) * 1000,\\n\\n  // extra info\\n  intelligenceBonus: (server, player) => calculateIntelligenceBonus(server, player),\\n  all: calculateAll,\\n  analyze\\n}\\n\\nexport default mine\\n\\nexport async function checkFormulasExe(ns) {\\n  let files = await ns.ls('home', 'Formulas.exe')\\n  return (files.length > 0)\\n}\\n\\nexport async function getHackingFormulas(ns, force = null) {\\n  if (force === true || (force === null && await checkFormulasExe(ns))) {\\n    return ns.formulas.hacking\\n  }\\n  return mine\\n}\",\"filename\":\"/lib/formulas.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.8,\"queueCompile\":false,\"server\":\"darkweb\",\"moduleSequenceNumber\":1122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"peta\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"peta\",\"httpPortOpen\":false,\"ip\":\"32.8.3.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":200,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"RemoteFileApiPort\":8111,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"26","AllGangsSave":"","LastExportBonus":"1665067027657","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}